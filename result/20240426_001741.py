datasets=[
    dict(abbr='siqa',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.EDAccEvaluator'),
            pred_role='BOT'),
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{context}\nQuestion: {question}\nA. {answerA}\nB. {answerB}\nC. {answerC}\nAnswer:',
                            role='HUMAN'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        path='./data/siqa',
        reader_cfg=dict(
            input_columns=[
                'context',
                'question',
                'answerA',
                'answerB',
                'answerC',
                ],
            output_column='all_labels',
            test_split='validation'),
        type='opencompass.datasets.siqaDataset_V2'),
    dict(abbr='winograd',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            prompt_template=dict(
                template=dict(
                    {0: dict(
                        round=[
                            dict(prompt="{prompt} Q: In the previous text, what does '{pronoun}' refer to? A: {opt1}",
                                role='HUMAN'),
                            ]),
                    1: dict(
                        round=[
                            dict(prompt="{prompt} Q: In the previous text, what does '{pronoun}' refer to? A: {opt2}",
                                role='HUMAN'),
                            ])}),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        name='wsc285',
        path='winograd_wsc',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                'pronoun',
                'opt1',
                'opt2',
                ],
            output_column='label',
            test_split='test',
            train_split='test'),
        type='opencompass.datasets.winogradDataset'),
    ]
models=[
    dict(abbr='opt125m',
        batch_size=128,
        max_out_len=100,
        max_seq_len=2048,
        model_kwargs=dict(
            device_map='auto'),
        path='facebook/opt-125m',
        run_cfg=dict(
            num_gpus=1),
        tokenizer_kwargs=dict(
            padding_side='left',
            proxies=None,
            truncation_side='left',
            trust_remote_code=True),
        tokenizer_path='facebook/opt-125m',
        type='opencompass.models.HuggingFaceCausalLM'),
    dict(abbr='opt350m',
        batch_size=64,
        max_out_len=100,
        max_seq_len=2048,
        model_kwargs=dict(
            device_map='auto'),
        path='facebook/opt-350m',
        run_cfg=dict(
            num_gpus=1),
        tokenizer_kwargs=dict(
            padding_side='left',
            proxies=None,
            truncation_side='left',
            trust_remote_code=True),
        tokenizer_path='facebook/opt-350m',
        type='opencompass.models.HuggingFaceCausalLM'),
    ]
opt125m=dict(
    abbr='opt125m',
    batch_size=128,
    max_out_len=100,
    max_seq_len=2048,
    model_kwargs=dict(
        device_map='auto'),
    path='facebook/opt-125m',
    run_cfg=dict(
        num_gpus=1),
    tokenizer_kwargs=dict(
        padding_side='left',
        proxies=None,
        truncation_side='left',
        trust_remote_code=True),
    tokenizer_path='facebook/opt-125m',
    type='opencompass.models.HuggingFaceCausalLM')
opt350m=dict(
    abbr='opt350m',
    batch_size=64,
    max_out_len=100,
    max_seq_len=2048,
    model_kwargs=dict(
        device_map='auto'),
    path='facebook/opt-350m',
    run_cfg=dict(
        num_gpus=1),
    tokenizer_kwargs=dict(
        padding_side='left',
        proxies=None,
        truncation_side='left',
        trust_remote_code=True),
    tokenizer_path='facebook/opt-350m',
    type='opencompass.models.HuggingFaceCausalLM')
siqa_datasets=[
    dict(abbr='siqa',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.EDAccEvaluator'),
            pred_role='BOT'),
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{context}\nQuestion: {question}\nA. {answerA}\nB. {answerB}\nC. {answerC}\nAnswer:',
                            role='HUMAN'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        path='./data/siqa',
        reader_cfg=dict(
            input_columns=[
                'context',
                'question',
                'answerA',
                'answerB',
                'answerC',
                ],
            output_column='all_labels',
            test_split='validation'),
        type='opencompass.datasets.siqaDataset_V2'),
    ]
winograd_datasets=[
    dict(abbr='winograd',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            prompt_template=dict(
                template=dict(
                    {0: dict(
                        round=[
                            dict(prompt="{prompt} Q: In the previous text, what does '{pronoun}' refer to? A: {opt1}",
                                role='HUMAN'),
                            ]),
                    1: dict(
                        round=[
                            dict(prompt="{prompt} Q: In the previous text, what does '{pronoun}' refer to? A: {opt2}",
                                role='HUMAN'),
                            ])}),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        name='wsc285',
        path='winograd_wsc',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                'pronoun',
                'opt1',
                'opt2',
                ],
            output_column='label',
            test_split='test',
            train_split='test'),
        type='opencompass.datasets.winogradDataset'),
    ]
work_dir='./outputs/default/20240426_001741'